{:title "Evaluate and Format Clojure in Emacs Markdown Buffers",
 :date "2013-08-26",
 :categories #{"nrepl" "clojure" "emacs" "markdown"},
 :description "When editing Clojure blocks in mardown or asciidoc documents, allow formating and evaluation of code blocks with clojure-mode.  Using mmm-mode, you can mix whichever major modes you want.",
 :file "evaluate_clojure_in_emacs_markdown_buffers.md",
 :legacy true}
{:title "Benchmarking Clojure Code with Criterium",
 :date "2010-02-19",
 :categories #{"clojure" "criterium" "benchmark" "jvm" "benchmarking"},
 :description "I have released Criterium, a new project for benchmarking code in Clojure.  I found Brent Broyer's article on Java benchmarking which explains many of the pitfalls of benchmarking on the JVM, and Criterion, a benchmarking library in Haskell.",
 :aliases #{"/post/2010/benchmarking_clojure_code_with_criterium.xhtml"},
 :file "benchmarking_clojure_code_with_criterium.md",
 :legacy true}
{:title "Configuration in Templates is not Configuration as Code",
 :date "2010-10-04",
 :categories #{"devops"
               "templating"
               "configuration"
               "pallet"
               "system"},
 :description "If you have configuration that uses template configuration files, you are practising neither configuration as code nor configuration as data.  Having configuration locked away in template files reduces its visibility, and makes it hard for you to query it. It might be easier to write configuration code to use templates, but it will come back to bite you.",
 :aliases #{"/post/2010/configuration_in_templates_is_not_configuration_as_code.xhtml"},
 :file "configuration_in_templates_is_not_configuration_as_code.md",
 :legacy true}
{:title "Snarf PGP Keys from Signed Messages in Emacs mu4e",
 :date "2013-08-25",
 :categories #{"mu4e" "email" "emacs" "mu" "pgp"},
 :description "Snarf PGP Keys from Signed Messages in the mu4e message view.",
 :file "snarf-pgp-keys-in-emacs-mu4e.md",
 :legacy true}
{:title "Shell Scripting in Clojure with Pallet",
 :date "2010-05-03",
 :categories #{"clojure" "shell" "stevedore" "pallet" "lisp"},
 :description "Let's face it, many of us hate writing shell scripts, and with good reason. Personally, it's not so much the shell language itself that puts me off, but organising everything around it; how do you deploy your scripts, how do you arrange to call other scripts, how do you manage the dependencies between your scripts?  Pallet aims to solve these problems by embedding shell script in clojure.",
 :aliases #{"/post/2010/mocking_clojure_functions_with_atticus.xhtml"},
 :file "shell_scripting_in_clojure_with_pallet.md",
 :legacy true}
{:title "How to Build Clojurescript Libs with JavaScript Dependencies",
 :date "2013-08-16",
 :categories #{"clojure" "packaging" "javascript" "clojurescript"},
 :description "A summary of different strategies for packaging JavaScipt dependencies in a Clojurescript library",
 :file "clojurescript-libs-with-js-dependencies.md",
 :legacy true}
{:title "Parsing YAML Dates in Rails Gives Surprising Results",
 :date "2009-03-07",
 :categories #{"YAML" "ruby" "rails"},
 :description "Today's surprise was that \"2009-01-01\" and \"2009-1-1\" get parsed differently by the YAML parser in Rails.  The former gets converted to a Date>, while the latter becomes a String.  It confused me for a while, as the problem only showed up when I wanted to send the dates to a Flot chart.  Looking at the standard, it's conforming behaviour.   Must be me that is non-conforming then...",
 :aliases #{"/post/2009/parsing_yaml_dates_in_rails_gives_surprising_results.xhtml"},
 :file "parsing_yaml_dates_in_rails_gives_surprising_results.md",
 :legacy true}
{:title "Mocking Clojure Functions with Atticus",
 :date "2010-05-18",
 :categories #{"clojure" "atticus" "lisp" "mock" "test"},
 :description "I dislike most mocking, and try and avoid it as much as possible. Sometimes it is however the only realistic way of testing.  I did a quick survey of mocking tools in clojure, and found them very much reflecting the Java mocking&#10;libraries. Clojure has a few more dynamic capabilities than Java, so I thought a little about how these could be used to make a simple mocking facility, and atticus is what I came up with.",
 :aliases #{"/post/2010/mocking_clojure_functions_with_atticus.xhtml"},
 :file "mocking_clojure_functions_with_atticus.md",
 :legacy true}
{:title "Product Development Flow",
 :date "2009-08-30",
 :categories #{"product development"
               "cycle time"
               "batch size"
               "advogato"},
 :description "I have spent the last few months with my latest start-up, Artfox, where I have been trying to push home some of the lean start-up advice expounded by Eric Lie's and Steve Blank.  I was hoping that 'The Principles of Product Development Flow', by Donald Reinertsen, might help me in making a persuasive argument for some of the more troublesome concepts around minimum viable product and ensuring that feedback loops are in place with your customers as soon as possible. Unfortunately, I don't think that this is the book if you are looking for immediate, practical prescription, but it is a thought provoking, rigorous view of the product development process, that pulls together ideas from manufacturing, telecommunications and the Marines.",
 :aliases #{"/post/2009/product_development_flow.xhtml"},
 :file "product_development_flow.md",
 :legacy true}
{:title "Swank Clojure gets a Break with the Local Environment",
 :date "2010-03-31",
 :categories #{"swank" "clojure" "slime" "break" "lisp"},
 :description "Recently I got fed up with a couple of warts in swank-clojure, so I made a couple of small fixes, and that lead to a couple of new features.  Using SLIME with Clojure has never been as smooth as using it with Common Lisp, and the lack of debug functionality beyond the display of stack traces is particularly onerous.  Recently, George Jahad's debug-repl showed the possibility of adding a break macro to enter the debugger with the call stack intact and local variables visible.  This functionality is now in swank-clojure.",
 :aliases #{"/post/2010/swank_clojure_gets_a_break_with_the_local_environment.xhtml"},
 :file "swank_clojure_gets_a_break_with_the_local_environment.md",
 :legacy true}
{:title "Create a Catalog for XHTML on OS X",
 :date "2009-03-11",
 :categories #{"mac" "xhtml" "os x" "html" "catalog"},
 :description "While trying to validate the output of cl-blog-generator I needed a local DTD for XHTML.  The textproc/xmlcatmgr package in Darwin Ports creates a catalog at /opt/local/etc/xml/catalog, but it does not include XHTML.  A flattened XHTML DTD can be found in the w3 validator library and installed the DTD's under /opt/local/share/xml/, but I couldn't find a catalog file for it.  It turns out it is pretty simple to write the catalog file; the Wikipedia XML Catalog entry has an example that contains what is needed.  Save the example next to the XHTML DTD's as catalog.xml and adjust the paths, then add a 'nextCatalog' entry in /opt/local/etc/xml/catalog pointing at the catalog.xml file.",
 :aliases #{"/post/2009/create_a_catalog_for_xhtml_on_os_x.xhtml"},
 :file "create_a_catalog_for_xhtml_on_os_x.md",
 :legacy true}
{:title "A Clojure library for FluidDB",
 :date "2009-09-13",
 :categories #{"clojure" "lisp" "fluiddb" "advogato"},
 :description "I have released Criterium, a new project for benchmarking code in Clojure.  I found Brent Broyer's article on Java benchmarking which explains many of the pitfalls of benchmarking on the JVM, and Criterion, a benchmarking library in Haskell.",
 :aliases #{"/post/2009/a_clojure_library_for_fluiddb.xhtml"},
 :file "a_clojure_library_for_fluiddb.md",
 :legacy true}
{:title "Generating Source Files with Leiningen",
 :date "2013-10-28",
 :categories #{"clojure" "leiningen"},
 :description "Generating source files with the leiningen run task.  Adds project specific source generation to prep-tasks.",
 :file "generating_source_with_leiningen.md",
 :legacy true}
{:title "Search Across Open Browser Tabs",
 :date "2009-03-28",
 :categories #{"ui" "browser" "search"},
 :description "I am an Opera user, these days mainly because it gives me integrated mail, feed and news reading, so that everything that comes from the web appears in one place.  The last significant innovation I remember was the introduction of tabs, and that was some time ago (long before it made its way into IE, for example).  I am a heavy user of tabs - it is not unusual for me to have over fifty pages open, as I tend to just open pages and rarely close them again.  This means that the tab icons are unreadable, and Alt+Tab (I'm on a mac) produces three or four columns to scroll through to select the tab I'm after.  I dream of a better tab navigation model, and would love to be able to search across all the open tabs.  Surely it wouldn't be that hard to implement.",
 :aliases #{"/post/2009/search_across_open_browser_tabs.xhtml"},
 :file "search_across_open_browser_tabs.md",
 :legacy true}
{:title "cl-blog-generator Gets Comments",
 :date "2009-03-31",
 :categories #{"cl-blog-generator" "lisp" "advogato"},
 :description "I have now added a comment system to cl-blog-generator.  My requirements were for a simple, low overhead, commenting system, preferable one that could possibly be fully automated.",
 :aliases #{"/post/2009/.xhtml"},
 :file "cl_blog_generator_gets_comments.md",
 :legacy true}
{:title       "Frameworks and Productivity",
 :date        "2009-03-20",
 :categories  #{"complexity" "productivity" "ruby" "rails"},
 :description "Yesterday was frustrating; I spent far too long trying to debug some problems in a Rails application I am writing.  Rails, and frameworks in general, are supposed to give us improved productivity by hiding the complexity and mechanics of the task at hand.  This is great as long as the framework behaves as expected, but invariably causes problems when things go wrong.",
 :aliases     #{"/post/2009/frameworks_and_productivity.xhtml"},
 :file        "frameworks_and_productivity.md",
 :legacy      true}
{:title "Alembic Reloads your Leiningen project.clj Dependencies",
 :date "2013-08-29",
 :categories #{"nrepl" "clojure" "alembic" "repl" "leiningen"},
 :description "When working on a project, you sometime need to add a dependency.  Using Alembic you can add the dependency in your project.clj file, and then call alembic.still/load-project to load the dependency into a running repl, without loosing your repl state.",
 :file "alembic_reloads_your_project_clj_dependencies.md",
 :legacy true}
{:title "Blog Site Generators",
 :date "2009-03-27",
 :categories #{"cl-blog-generator" "blog" "lisp"},
 :description "I recently uploaded some links to my cl-blog-generator project, and have been getting some feedback with comparisons to other blog site generators, or compilers, such as Steve Kemp's Chronicle, or Jekyll as used on GitHub Pages.  Compared to these, cl-blog-generator is immature, but takes a different approach in several areas that Charles Stewart suggested might be worth exploring.  I look forward to any comments you might have. ",
 :aliases #{"/post/2009/blog_site_generators.xhtml"},
 :file "blog_site_generators.md",
 :legacy true}
{:title "Rails Environments For Lisp",
 :date "2009-04-07",
 :categories #{"cl-blog-generator" "ruby" "lisp" "advogato" "rails"},
 :description "The facility of Ruby on Rails' test, development and production environments is one of those features that goes almost unremarked, but which makes using rails more pleasant.  No doubt everyone has their own solution for this in other environments, and while I am sure Common Lisp is not lacking in examples, I have not seen an idiomatic implementation.  In developing cl-blog-generator I came up with the following solution.",
 :aliases #{"/post/2009/rails_environments_for_lisp.xhtml"},
 :file "rails_environments_for_lisp.md",
 :legacy true}
{:title "Twitter is More Secure than My Credit Card",
 :date "2009-04-02",
 :categories #{"twitter" "oauth"},
 :description "Twitter now lets developers build applications that take actions on your behalf without you ever having to divulge your password. Instead of asking you for your password, these applications ask Twitter to ask you for permission, and you give permission to the application while logged in to Twitter. What's even better is that you can revoke the application's permissions, from within Twitter, at any time, without having to change your password. The OAuth protocol makes this possible, and does so in a very secure manner.",
 :aliases #{"/post/2009/twitter_is_more_secure_than_my_credit_card.xhtml"},
 :file "twitter_is_more_secure_than_my_credit_card.md",
 :legacy true}
{:title "Provisioning Cloud Nodes with Pallet",
 :date "2010-05-12",
 :categories #{"devops" "clojure" "jclouds" "pallet"},
 :description "I recently needed to move a server from dedicated hosting to a cloud server. The existing server had been configured over time by several people, with little documentation.  I want to make sure that this time everything was documented, and what better way than doing that than using an automated configuration tool.",
 :aliases #{"/post/2010/provisioning_cloud_nodes_with_pallet.xhtml"},
 :file "provisioning_cloud_nodes_with_pallet.md",
 :legacy true}
{:title "Setting up clojure and compojure with maven",
 :date "2009-09-06",
 :categories #{"clojure" "maven" "webapp" "lisp" "compojure"},
 :description "I wanted to experiment with building a webapp using Clojure, so I tried setting up the Compojure web framework.  I am new to clojure, so I am not sure if this is the preferred way of doing things, but here goes anyway.",
 :aliases #{"/post/2009/setting_up_clojure_and_compojure_with_maven.xhtml"},
 :file "setting_up_clojure_and_compojure_with_maven.md",
 :legacy true}
{:title "Exploring a todo app with core.async",
 :date "2013-08-15",
 :categories #{"clojure" "templating" "core.async" "clojurescript"},
 :description "Builds the equivalent of the angularJS TODO example with core.async",
 :file "webapp_with_core.async.md",
 :legacy true}
{:title       "Configure Nagios using Pallet",
 :date        "2010-08-18",
 :categories  #{"devops" "clojure" "nagios" "pallet" "advogato"},
 :description "Basic Nagios support was recently added to pallet, and while very simple to use, this blog post should make it even simpler. The overall philosophy is to configure the nagios service monitoring definitions along with the service itself, rather than have monolithic nagios configuration, divorced from the configuration of the various nodes.",
 :aliases     #{"/post/2010/configure_nagios_using_pallet.xhtml"},
 :file        "configure_nagios_using_pallet.md",
 :legacy      true}
{:title       "Back to blogging"
 :description "My road back to a working blogging environment, thoughts on comments and blogging framworks"
 :file        "back_to_blogging.md"
 :categories  #{"clojure" "blog"}
 :date        "2021-11-14"
 :discuss     "https://github.com/hugoduncan/hugoduncan.github.com/discussions/4"}
