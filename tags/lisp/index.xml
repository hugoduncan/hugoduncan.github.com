<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns='http://www.w3.org/2005/Atom' xml:lang='en-us'>
 <title>pelure</title>
 <id>http://hugoduncan.github.com/</id>
 <link href='./' />
 <link rel='self' href='' />
 <logo>rsslogo.jpg</logo>
 <icon>/favicon.ico</icon>
 <author><name>Hugo Duncan</name></author>
 <subtitle>Pelure </subtitle>
 <rights>All content written by Hugo Duncan and photos by Hugo Duncan Copyright Hugo Duncan, all rights reserved.</rights> 
 <updated>2013-08-16T00:00:00Z</updated>


<entry xml:base="http://hugoduncan.github.com/post/mocking_clojure_functions_with_atticus"><title>Mocking Clojure Functions with Atticus</title><link href="http://hugoduncan.github.com/post/mocking_clojure_functions_with_atticus"/><id>http://hugoduncan.github.com/post/mocking_clojure_functions_with_atticus</id><published>2010-05-18T00:00:00Z</published><updated>2010-05-18T00:00:00Z</updated><summary type="html"> </summary><content type="html">&lt;p&gt;&lt;p&gt;I dislike most mocking, and try and avoid it as much as possible. Sometimes
it is however the only realistic way of testing.  I did a quick survey of
mocking tools in clojure, and found them very much reflecting the Java mocking
libraries. Clojure has a few more dynamic capabilities than Java, so I thought a
little about how these could be used to make a simple mocking facility, and &lt;a href=&#34;http://github.com/hugoduncan/atticus&#34;&gt;atticus&lt;/a&gt; is what I came up
with.&lt;/p&gt;
&lt;p&gt;There is a consensus that mocking should be implemented by binding a
function&amp;rsquo;s var to a new function for the duration of a test, and atticus does
this too. Atticus&amp;rsquo; premise is that we can do simple mocking by declaring the
mock function as a local function definition, and have the local function do the
argument checking, return value setting, etc.  The simplest case would be
something like below, which checks the value of its argument and specifies a
return value:&lt;/p&gt;
&lt;pre class=&#34;clojure&#34;&gt;
;; pull in namespaces
(use &amp;lsquo;clojure.test)
(require &amp;lsquo;atticus.mock)&lt;/p&gt;

&lt;p&gt;;; define test which mocks f
(deftest mock-test
  (atticus.mock/expects
    [(f &lt;a href=&#34;is (= arg 1&#34;&gt;arg&lt;/a&gt; &amp;ldquo;Check argument&amp;rdquo;)
       arg)] ; set the return value
    ;; in a real test case this would be called
    ;; indirectly by some other function
    (is (= 1 (f 1)) &amp;ldquo;Call mocked function&amp;rdquo;))
&lt;/pre&gt;
&lt;p&gt;At the moment, I have added two macros to this.  &lt;code&gt;once&lt;/code&gt;, which
checks a function is called once, and &lt;code&gt;times&lt;/code&gt;, which checks that a
function is called a specific number of times. The macros are used to wrap the
body of the mock function, which keeps the function&amp;rsquo;s expected behaviour in one
place.&lt;/p&gt;
&lt;pre class=&#34;clojure&#34;&gt;
;; define test, that should be called just once
(deftest mock-test
  (atticus.mock/expects
    &lt;a href=&#34;is (= 1 (f 1&#34;&gt;(f &lt;a href=&#34;atticus.mock/once
         (is (= arg 1&#34;&gt;arg&lt;/a&gt; &amp;ldquo;Check argument&amp;rdquo;)
         arg))&lt;/a&gt;) &amp;ldquo;Call mocked function&amp;rdquo;))
&lt;/pre&gt;
&lt;pre class=&#34;clojure&#34;&gt;
;; define test, that should be called exactly twice
(deftest mock-test
  (atticus.mock/expects
    &lt;a href=&#34;is (= 1 (f 1&#34;&gt;(f &lt;a href=&#34;atticus.mock/times 2
         (is (= arg 1&#34;&gt;arg&lt;/a&gt; &amp;ldquo;Check argument&amp;rdquo;)
         arg))&lt;/a&gt;) &amp;ldquo;Call mocked function&amp;rdquo;)
    (is (= 1 (f 1)) &amp;ldquo;Call mocked function&amp;rdquo;))
&lt;/pre&gt;
&lt;p&gt;So what do you think, is this a reasonable approach? Not having the explicit
calls to &lt;code&gt;returns&lt;/code&gt;, etc, might be seen as a loss of declarative
clarity, but I for one prefer this, as it gives you the full power of the
language to test the arguments and set the return value.&lt;/p&gt;
&lt;h3&gt;References&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://s-expressions.com/2010/01/24/conjure-simple-mocking-and-stubbing-for-clojure-unit-tests/&#34;&gt;conjure – simple mocking and stubbing for Clojure unit-tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://richhickey.github.com/clojure-contrib/mock-api.html&#34;&gt;clojure.contrib.mock&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://code.google.com/p/test-expect/&#34;&gt;test-expect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.n01se.net/?p=134&#34;&gt;Using binding to mock out even “direct linked” functions in Clojure&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
</content></entry>

<entry xml:base="http://hugoduncan.github.com/post/shell_scripting_in_clojure_with_pallet"><title>Shell Scripting in Clojure with Pallet</title><link href="http://hugoduncan.github.com/post/shell_scripting_in_clojure_with_pallet"/><id>http://hugoduncan.github.com/post/shell_scripting_in_clojure_with_pallet</id><published>2010-05-03T00:00:00Z</published><updated>2010-05-03T00:00:00Z</updated><summary type="html"> </summary><content type="html">&lt;p&gt;Let&#39;s face it, many of us hate writing shell scripts, and with good
reason. Personally, it&#39;s not so much the shell language itself that puts me off,
but organising everything around it; how do you deploy your scripts, how do you
arrange to call other scripts, how do you manage the dependencies between your
scripts?  &lt;a href=&#34;http://github.com/hugoduncan/pallet&#34;&gt;Pallet&lt;/a&gt; aims to solve
these problems by embedding shell script in &lt;a href=&#34;http://clojure.org/&#34;&gt;clojure&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Embedding in Clojure&lt;/h2&gt;

&lt;p&gt;Embedding other languages in lisp is not a new idea; &lt;a href=&#34;http://common-lisp.net/project/parenscript/&#34;&gt;parenscript&lt;/a&gt;, &lt;a href=&#34;http://github.com/arohner/scriptjure&#34;&gt;scriptjure&lt;/a&gt; (which Pallet&#39;s
embedding is based on), and &lt;a href=&#34;http://www.gitorious.org/clojureql/&#34;&gt;ClojureQL&lt;/a&gt; all do this.&lt;/p&gt;

&lt;p&gt;So what does shell script in clojure look like? Some examples:&lt;/p&gt;
&lt;pre class=&#34;clojure&#34;&gt;(script
  (ls &#34;/some/path&#34;)
  (defvar x 1)
  (println @x)
  (defn foo [x] (ls @x))
  (foo 1)
  (if (= a a)
    (println &#34;Reassuring&#34;)
    (println &#34;Ooops&#34;))
  (println &#34;I am&#34; @(whomai))&lt;/pre&gt;

&lt;p&gt;which generates:&lt;/p&gt;

&lt;pre&gt;ls /some/path
x=1
echo ${x}
function foo(x) {
ls ${x}
 }
foo 1
if [ \\( \&#34;a\&#34; == \&#34;a\&#34; \\) ]; then echo Reassuring;else echo Ooops;fi
echo I am $(whomai)
&lt;/pre&gt;

&lt;p&gt;The aim is to make writing shell script similar to writing Clojure, but there
are obvious differences in the language that limit how far that can be taken. To
run the code above at the REPL, you&#39;ll have to use the
&lt;code&gt;pallet.stevedore&lt;/code&gt; package.&lt;/p&gt;

&lt;h2&gt;Escaping back to Clojure&lt;/h2&gt;

&lt;p&gt;Escaping allows us to embed Clojure values and expressions inside our scripts, in much the same way as symbols can be unquoted when writing macros.&lt;/p&gt;

&lt;pre class=&#34;clojure&#34;&gt;(let [path &#34;/some/path&#34;]
  (script
    (ls ~path)
    (ls ~(.replace path &#34;some&#34; &#34;other)))&lt;/pre&gt;

&lt;p&gt;We can now write Clojure functions that produce shell scripts.  Writing
scripts as clojure functions allows you to use the Clojure namespace facilities,
and allows you to distribute you scripts in jar files (which can be deployed in
a versioned manner with maven)&lt;/p&gt;

&lt;pre class=&#34;clojure&#34;&gt;(defn list-path [path]
  (script
    (ls ~path)
    (ls ~(.replace path &#34;some&#34; &#34;other)))&lt;/pre&gt;

&lt;h2&gt;Composing scripts&lt;/h2&gt;

&lt;p&gt;Pallet allows the scripts to be combined. &lt;code&gt;do-script&lt;/code&gt; concatenates
the code pieces together.&lt;/p&gt;

&lt;pre class=&#34;clojure&#34;&gt;(do-script
  (list-path &#34;path1&#34;)
  (list-path &#34;path2&#34;))
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;chain-script&lt;/code&gt; chains the scripts together with &#39;&amp;amp;&amp;amp;&#39;.&lt;/p&gt;

&lt;pre class=&#34;clojure&#34;&gt;(chain-script
  (list-path &#34;path1&#34;)
  (list-path &#34;path2&#34;))
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;checked-script&lt;/code&gt; finally allows the chaining of scripts, and calls
exit if the chain fails.&lt;/p&gt;

&lt;pre class=&#34;clojure&#34;&gt;(checked-script &#34;Message&#34;
  (list-path &#34;path1&#34;)
  (list-path &#34;path2&#34;))
&lt;/pre&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Writing shell script in Clojure gives access to Clojure&#39;s namespace facility
allowing modularised shell script, and to Clojure&#39;s packaging as jar files,
which allows reuse and distribution.  The ability to compose script fragments
leads to being able to macro-like functions, such &lt;code&gt;checked-script&lt;/code&gt;,
and you could even use Clojure macros to generate script (but I haven&#39;t thought
of a use for that, yet).&lt;/p&gt;

&lt;p&gt;The syntax for the embedding has arisen out of practical usage, so is far
from complete, and can definitely be improved. I look forward to hearing your
feedback!&lt;/p&gt;

&lt;p&gt;UPDATE: stevedore now requires a binding for *template*, to specify the target for the script generation.  This should be a vector containing one of :ubuntu, :centos, or :darwin, and one of :aptitude, :yum, :brew.&lt;/p&gt;
</content></entry>

<entry xml:base="http://hugoduncan.github.com/post/swank_clojure_gets_a_break_with_the_local_environment"><title>Swank Clojure gets a Break with the Local Environment</title><link href="http://hugoduncan.github.com/post/swank_clojure_gets_a_break_with_the_local_environment"/><id>http://hugoduncan.github.com/post/swank_clojure_gets_a_break_with_the_local_environment</id><published>2010-03-31T00:00:00Z</published><updated>2010-03-31T00:00:00Z</updated><summary type="html"> </summary><content type="html">&lt;p&gt;Recently I got fed up with a couple of warts in swank-clojure, so I made a couple of small fixes, and that lead to a couple of new features.  Using SLIME with Clojure has never been as smooth as using it with Common Lisp, and the lack of debug functionality beyond the display of stack traces is particularly onerous.  Recently, George Jahad and Alex Osborne&amp;rsquo;s &lt;a href=&#34;http://github.com/GeorgeJahad/debug-repl&#34;&gt;debug-repl&lt;/a&gt; showed the possibility of adding a break macro to enter the debugger with the call stack intact and local variables visible.  This functionality is now in swank-clojure.&lt;/p&gt;

&lt;p&gt;Consider the following example, adapted from debug-repl:&lt;/p&gt;

&lt;pre&gt;
  (let [c 1
        d 2]
    (defn a [b c]
      (swank.core/break)
      d))
  (a &#34;foo&#34; &#34;bar&#34;)
&lt;/pre&gt;

&lt;p&gt;Running this now brings up the following SLDB debug frame:&lt;/p&gt;

&lt;pre&gt;
BREAK:
  [Thrown class java.lang.Exception]

Restarts:
 0: [QUIT] Quit to the SLIME top level
 1: [CONTINUE] Continue from breakpoint

Backtrace:
  0: user$eval__1666$a__1667.invoke(NO_SOURCE_FILE:1)
  1: user$eval__1670.invoke(NO_SOURCE_FILE:1)
  2: clojure.lang.Compiler.eval(Compiler.java:5358)
  3: clojure.lang.Compiler.eval(Compiler.java:5326)
  4: clojure.core$eval__4157.invoke(core.clj:2139)
  --more--
&lt;/pre&gt;

&lt;p&gt;As you can see, the stack trace reflects the location of the breakpoint, and there is a CONTINUE restart. Pressing &#34;1&#34;, or Enter on the CONTINUE line, or clicking the CONTINUE line should all cause the the debugger frame to close, and the result of the function call, 2, to be displayed in the REPL frame.&lt;/p&gt;

&lt;p&gt;Enter, or &#34;t&#34;, on the first line of the stacktrace causes the local variables to be displayed:&lt;/p&gt;
&lt;pre&gt;
BREAK:
  [Thrown class java.lang.Exception]

Restarts:
 0: [QUIT] Quit to the SLIME top level
 1: [CONTINUE] Continue from breakpoint

Backtrace:
  0: user$eval__1666$a__1667.invoke(NO_SOURCE_FILE:1)
      Locals:
        b = foo
        d = 2
        c = bar
  1: user$eval__1670.invoke(NO_SOURCE_FILE:1)
  2: clojure.lang.Compiler.eval(Compiler.java:5358)
  3: clojure.lang.Compiler.eval(Compiler.java:5326)
  4: clojure.core$eval__4157.invoke(core.clj:2139)
  --more--
&lt;/pre&gt;

&lt;p&gt;Pressing enter on one of the local variable lines will pull up the SLIME inspector with that value. If you go back to the REPL without closing the SLDB frame, there will be no prompt, but pressing enter should give you one.  The local variables are then all be avaiable for evaluation form the REPL.&lt;/p&gt;

&lt;p&gt;Should an error occur while you are using the REPL, you will be placed in a nested debug session, with an &#34;ABORT&#34; restart to return to the previous debug level.&lt;/p&gt;

&lt;p&gt;Finally, restarts are now displayed for each of the exceptions in the exception cause chain.&lt;/p&gt;

&lt;pre&gt;
  (let [c 1
        d 2]
    (defn a [b c]
      (throw (Exception. &#34;top&#34; (Exception. &#34;nested&#34; (Exception. &#34;bottom&#34;))))
      d))
  (a &#34;foo&#34; &#34;bar&#34;)
&lt;/pre&gt;

&lt;p&gt;This will bring up the debugger with 2 cause restarts, which can be used to examine the related stack traces.&lt;/p&gt;

&lt;pre&gt;
top
   [Thrown class java.lang.Exception]

Restarts:
  0: [QUIT] Quit to the SLIME top level
  1: [CAUSE1] Invoke debugger on cause  nested [Thrown class java.lang.Exception]
  2: [CAUSE2] Invoke debugger on cause   bottom [Thrown class java.lang.Exception]

Backtrace:
   0: user$eval__1752$a__1753.invoke(NO_SOURCE_FILE:1)
   1: user$eval__1756.invoke(NO_SOURCE_FILE:1)
   2: clojure.lang.Compiler.eval(Compiler.java:5358)
   3: clojure.lang.Compiler.eval(Compiler.java:5326)
   4: clojure.core$eval__4157.invoke(core.clj:2139)
  --more--
&lt;/pre&gt;

&lt;p&gt;The break functionality is known only to work from the REPL thread at the moment.  With that small proviso, I hope you enjoy the new functionality - at least it provides a basic debug functionality until full JPDA/JDI integration is tackled.&lt;/p&gt;
</content></entry>

<entry xml:base="http://hugoduncan.github.com/post/a_clojure_library_for_fluiddb"><title>A Clojure library for FluidDB</title><link href="http://hugoduncan.github.com/post/a_clojure_library_for_fluiddb"/><id>http://hugoduncan.github.com/post/a_clojure_library_for_fluiddb</id><published>2009-09-13T00:00:00Z</published><updated>2009-09-13T00:00:00Z</updated><summary type="html"> </summary><content type="html">&lt;p&gt;&lt;a href=&#34;http://fluidinfo.com/&#34;&gt;FluidDB&lt;/a&gt;, a &#34;cloud&#34; based triple-store, where the objects are immutable and can be tagged by anyone, launched about a month ago. As a another step to getting up to speed with &lt;a href=&#34;http://clojure.org&#34;&gt;Clojure&lt;/a&gt;, I decided to write a client library, and &lt;a href=&#34;http://github.com/hugoduncan/clj-fluiddb&#34;&gt;clj-fluiddb&lt;/a&gt; was born.  The code was very simple, especially as I could base the library on &lt;a href=&#34;http://github.com/hdurer/cl-fluiddb&#34;&gt;cl-fluiddb&lt;/a&gt;, a Common-Lisp library.&lt;/p&gt;
&lt;p&gt;I have some ideas I want to try out using FluidDB.  It&#39;s permission system is one of it&#39;s &lt;a href=&#34;http://abouttag.blogspot.com/2009/09/permissions-worth-getting-excited-about.html&#34;&gt;best features&lt;/a&gt;, together with the ability to &lt;a href=&#34;http://www.xavierllora.net/2009/08/25/liquid-rdf-meandering-in-fluiddb/&#34;&gt;use it for RDF like triples&lt;/a&gt; means that it could provide a usable basis for growing the semantic web.  My ideas are less grandiose, but might take as long to develop, we&#39;ll see...&lt;/p&gt;
</content></entry>

<entry xml:base="http://hugoduncan.github.com/post/setting_up_clojure_and_compojure_with_maven"><title>Setting up clojure and compojure with maven</title><link href="http://hugoduncan.github.com/post/setting_up_clojure_and_compojure_with_maven"/><id>http://hugoduncan.github.com/post/setting_up_clojure_and_compojure_with_maven</id><published>2009-09-06T00:00:00Z</published><updated>2009-09-06T00:00:00Z</updated><summary type="html"> </summary><content type="html">&lt;p&gt;I wanted to experiment with building a webapp using &lt;a href=&#34;http://clojure.org&#34;&gt;Clojure&lt;/a&gt;, so I tried setting up the &lt;a href=&#34;http://en.wikibooks.org/wiki/Compojure&#34;&gt;Compojure&lt;/a&gt; web framework.  I am new to clojure, so I am not sure if this is the preferred way of doing things, but here goes anyway.&lt;/p&gt;
&lt;p&gt;There seem to be several ways to set up clojure in emacs.  I ended up following &lt;a href=&#34;http://bc.tech.coop/blog/081205.html&#34;&gt;Bill Clementson&#39;s instructions&lt;/a&gt;. A couple of years ago I had some experience using maven, so decided to use this to manage my classpath.  Installing maven on my mac was simple with macports (&lt;code&gt;sudo port install maven&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Setting up a POM for maven took longer than expected.  &lt;a href=&#34;http://stuartsierra.com/2009/09/04/cutting-edge-clojure-development-with-maven&#34;&gt;Stuart Sierra&#39;s post&lt;/a&gt; pointed me to the formos maven repository containing the clojure snapshots.  With some help from google, I also found the &lt;a href=&#34;http://github.com/talios/clojure-maven-plugin/tree/master&#34;&gt;maven-clojure-plugin&lt;/a&gt;, which is a maven plugin for compiling clojure, and the &lt;a href=&#34;http://github.com/fred-o/clojureshell-maven-plugin/tree/master&#34;&gt;clojureshell-maven-plugin&lt;/a&gt; which will start a swank session (or bare REPL) using the pom information.&lt;/p&gt;
&lt;p&gt;With the basic clojure and maven setup in place, it was time to move on to compojure. I added the &lt;a href=&#34;http://github.com/weavejester/compojure/tree/master&#34;&gt;Compojure git repository&lt;/a&gt; into Bill Clementson&#39;s clj-build script, ran it to clone the repository, and then built it using ant (&lt;code&gt;ant deps; ant&lt;/code&gt;).  &lt;a href=&#34;http://jimdowning.wordpress.com/2009/07/30/compojure-maven/&#34;&gt;Jim Downing&lt;/a&gt; instructions for installing compojure into your local maven repository (&lt;code&gt;mvn install:install-file -DgroupId=org.clojure -DartifactId=compojure -Dversion=1.0-SNAPSHOT -Dfile=compojure.jar -Dpackaging=jar&lt;/code&gt;) work smoothly.&lt;/p&gt;
</content></entry>

<entry xml:base="http://hugoduncan.github.com/post/rails_environments_for_lisp"><title>Rails Environments For Lisp</title><link href="http://hugoduncan.github.com/post/rails_environments_for_lisp"/><id>http://hugoduncan.github.com/post/rails_environments_for_lisp</id><published>2009-04-07T00:00:00Z</published><updated>2009-04-07T00:00:00Z</updated><summary type="html"> </summary><content type="html">&lt;p&gt;The facility of Ruby on Rails&#39; test, development and production environments is one of those features that goes almost unremarked, but which makes using rails more pleasant.  No doubt everyone has their own solution for this in other environments, and while I am sure Common Lisp is not lacking in examples, I have not seen an idiomatic implementation.  In developing &lt;a href=&#34;http://github.com/hugoduncan/cl-blog-generator&#34;&gt;cl-blog-generator&lt;/a&gt; I came up with the following solution.&lt;/p&gt;
&lt;p&gt;Configuration in Common Lisp usually depends on using special variables, which can be rebound across any block of code.  I started by putting the configuration of my blog into s-expressions in files, but got tired of specifying the file names for different blogs.  Instead, I created an association list for each configuration, and registered each using a symbol as key.  I can now switch to a given environment by specifying the symbol for the environment.
&lt;/p&gt;
&lt;p&gt;The implementation (in &lt;code&gt;src/configure.lisp&lt;/code&gt; under the &lt;a href=&#34;http://github.com/hugoduncan/cl-blog-generator&#34;&gt;GitHub repository&lt;/a&gt;) consists of two functions and a special variable.  &lt;code&gt;SET-ENVIRONMENT&lt;/code&gt; is used to register an environment, and &lt;code&gt;CONFIGURE&lt;/code&gt; is used to make an environment active.  The environments are stored in &lt;code&gt;*ENVIRONMENTS*&lt;/code&gt; special as an association list.  An example of setting up the configurations can be seen in the &lt;code&gt;config.lisp&lt;/code&gt; file.  In creating the configurations I drop the &#39;*&#39; from the special names.&lt;/p&gt;
&lt;p&gt;I&#39;m relatively new to CL, so let me now if I have overlooked anything.  Writing this post makes me think I am missing a &lt;code&gt;WITH-ENVIRONMENT&lt;/code&gt; macro ...&lt;/p&gt;
</content></entry>

<entry xml:base="http://hugoduncan.github.com/post/cl_blog_generator_gets_comments"><title>cl-blog-generator Gets Comments</title><link href="http://hugoduncan.github.com/post/cl_blog_generator_gets_comments"/><id>http://hugoduncan.github.com/post/cl_blog_generator_gets_comments</id><published>2009-03-31T00:00:00Z</published><updated>2009-03-31T00:00:00Z</updated><summary type="html"> </summary><content type="html">&lt;p&gt;I have now added a comment system to &lt;a href=&#34;http://github.com/hugoduncan/cl-blog-generator&#34;&gt;cl-blog-generator&lt;/a&gt;.  My requirements were for a simple, low overhead, commenting system, preferable one that could possibly be fully automated.&lt;/p&gt;

&lt;p&gt;The comment system was inspired by &lt;a href=&#34;http://www.steve.org.uk/Software/chronicle/&#34;&gt;Chronicle&lt;/a&gt;&#39;s, with a slight modification in approach - the comments are never saved on the web server, and are just sent by email to a dedicated email address.  Spam filtering is delegated to the whatever spam filtering is implemented on the mail server, or in your email client.  The comment emails are then processed in CL using &lt;a href=&#34;http://common-lisp.net/project/mel-base/&#34;&gt;mel-base&lt;/a&gt; and written to the local filesystem.  Moderation can optionally occur on the CL side, if that is preferable to using the email client.&lt;/p&gt;

&lt;p&gt;There is still some work left to do - I would like to be able to switch off comments on individual posts, either on demand on after a default time period - but I thought I would let real world usage drive my development.&lt;/p&gt;
</content></entry>

<entry xml:base="http://hugoduncan.github.com/post/blog_site_generators"><title>Blog Site Generators</title><link href="http://hugoduncan.github.com/post/blog_site_generators"/><id>http://hugoduncan.github.com/post/blog_site_generators</id><published>2009-03-27T00:00:00Z</published><updated>2009-03-27T00:00:00Z</updated><summary type="html"> </summary><content type="html">&lt;p&gt;
I recently uploaded some links to my &lt;a href=&#34;http://github.com/hugoduncan/cl-blog-generator&#34;&gt;cl-blog-generator&lt;/a&gt; project, and have been getting some feedback with comparisons to other blog site generators, or compilers, such as &lt;a href=&#34;http://www.advogato.org/person/Stevey/&#34;&gt;Steve Kemp&lt;/a&gt;&#39;s &lt;a href=&#34;http://www.steve.org.uk/Software/chronicle/&#34;&gt;Chronicle&lt;/a&gt;, or &lt;a href=&#34;http://github.com/mojombo/jekyll&#34;&gt;Jekyll&lt;/a&gt; as used on &lt;a href=&#34;http://github.com/blog/272-github-pages&#34;&gt;GitHub Pages&lt;/a&gt;.  Compared to these, cl-blog-generator is immature, but takes a different approach in several areas that &lt;a href=&#34;http://advogato.org/person/chalst/&#34;&gt;Charles Stewart&lt;/a&gt; suggested might be worth exploring.  I look forward to any comments you might have.
&lt;/p&gt;
&lt;h3&gt;Formatting&lt;/h3&gt;
&lt;p&gt;
All the blog generators seem to use a file based approach for writing content, but they differ in the choice of input formats supported, and in the approach to templating.
&lt;code&gt;cl-blog-generator&lt;/code&gt; is the least flexible, requiring input in XHTML, while &lt;code&gt;Chronicle&lt;/code&gt; allows HTML, Textile or Markdown, and &lt;code&gt;Jekyll&lt;/code&gt; Textile or Markdown.  For templates, &lt;code&gt;Chronicle&lt;/code&gt; uses Perl&#39;s &lt;a href=&#34;http://search.cpan.org/~samtregar/HTML-Template-2.9/Template.pm&#34;&gt;HTML::Template&lt;/a&gt;, and &lt;code&gt;Jekyll&lt;/code&gt; uses &lt;a href=&#34;http://www.liquidmarkup.org/&#34;&gt;Liquid&lt;/a&gt;. &lt;code&gt;cl-blog-generator&lt;/code&gt; uses an approach which substitutes content into elements identified with specific id&#39;s or classes, similar to transforming the templates with XSLT.
&lt;/p&gt;
&lt;p&gt;
&lt;code&gt;cl-blog-generator&lt;/code&gt;&#39;s choice of XHTML input was driven by a requirement to enable the validation of post content in the editor, which is not possible using &lt;code&gt;Chronicle&lt;/code&gt;&#39;s HTML input because of the headers and lack of a &lt;code&gt;body&lt;/code&gt; or &lt;code&gt;head&lt;/code&gt; element, and a desire to be able to use any CSS tricks I wanted, which ruled out Textile and Markdown, or any other markup language.  The lack of an external templating engine in &lt;code&gt;cl-blog-generator&lt;/code&gt; was driven by simplicity; I couldn&#39;t see a use for conditionals or loops given the fixed structure of the content, and this choice leads to templates that validate, unlike &lt;code&gt;Jekyll&lt;/code&gt;, and which are not full of HTML comments.  The current id and class naming scheme in &lt;code&gt;cl-blog-generator&lt;/code&gt; could certainly use some refinement to improve the flexibility of the output content format, and I would definitely welcome requests for enhancements should the scheme not fit your requirements.
&lt;/p&gt;

&lt;h3&gt;Database and Two Phase Publishing&lt;/h3&gt;
&lt;p&gt;
Perhaps the most significant difference in approach for &lt;code&gt;cl-blog-generator&lt;/code&gt; is its use of a database and an explicit publish step.  With &lt;code&gt;cl-blog-generator&lt;/code&gt; a draft can exist anywhere in the filesystem, and must be &#34;published&#34; to be recognised by the blog site generator.  The publishing process fills in some default metadata, such as post date, if this is not originally specified, copies the modified draft to a configurable location, and enters the metadata into the database.  This ensures that the post is completely specified by its representation in the filesystem, and that the database is recreatable.
&lt;/p&gt;
&lt;p&gt;
The database enables the partial regeneration of the site, without having to parse the whole site, and makes the linking of content much simpler.
However, having &lt;a href=&#34;http://common-lisp.net/project/elephant/&#34;&gt;Elephant&lt;/a&gt; as a dependency is probably the largest impediment to installation at present.
&lt;/p&gt;

&lt;h3&gt;On Titles, Dates, Tags and Filenames&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;cl-blog-generator&lt;/code&gt;&#39;s input XHTML has been augmented to add elements for specifying post title, date, update date (which I believe is missing from the other systems), slug, description, and tags.  On publising (see next section), any of these elements that is missing, except the mandatory title, is filled in with defaults.&lt;/p&gt;

&lt;p&gt;Both &lt;code&gt;Chronicle&lt;/code&gt; and &lt;code&gt;Jekyll&lt;/code&gt; use a preamble to specify metadata, with the filename being used to generate the post&#39;s slug. &lt;code&gt;Jekyll&lt;/code&gt; also uses the filename and its path for specifying the post date, and tags.
&lt;/p&gt;

&lt;h3&gt;Bells and Whistles&lt;/h3&gt;

&lt;p&gt;&lt;p&gt;Finally, here is a grab bag of features.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Chronicle&lt;/code&gt; comes with a commenting system.
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;cl-blog-generator&lt;/code&gt; generates a &lt;code&gt;meta&lt;/code&gt; description element, which is used by search engines to generate link text.  It also generates &lt;code&gt;meta&lt;/code&gt; elements with links to the previous and next posts.
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Jekyll&lt;/code&gt; has a &amp;ldquo;Related posts&amp;rdquo; feature for generating links to similar posts.
&lt;/li&gt;&lt;/p&gt;

&lt;p&gt;&lt;li&gt; &lt;code&gt;Chronicle&lt;/code&gt; and &lt;code&gt;Jekyll&lt;/code&gt; both have migration scripts for importing content. &lt;/li&gt;
&lt;li&gt; &lt;code&gt;Chronicle&lt;/code&gt; has a spooler for posting pre-written content at specific times&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
</content></entry>

</feed>
