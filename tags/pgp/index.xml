<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns='http://www.w3.org/2005/Atom' xml:lang='en-us'>
 <title>pelure</title>
 <id>http://hugoduncan.github.com/</id>
 <link href='./' />
 <link rel='self' href='' />
 <logo>rsslogo.jpg</logo>
 <icon>/favicon.ico</icon>
 <author><name>Hugo Duncan</name></author>
 <subtitle>Pelure </subtitle>
 <rights>All content written by Hugo Duncan and photos by Hugo Duncan Copyright Hugo Duncan, all rights reserved.</rights> 
 <updated>2013-08-29T00:00:00Z</updated>


<entry xml:base="http://hugoduncan.github.com/post/snarf-pgp-keys-in-emacs-mu4e"><title>Snarf PGP Keys from Signed Messages in Emacs mu4e</title><link href="http://hugoduncan.github.com/post/snarf-pgp-keys-in-emacs-mu4e"/><id>http://hugoduncan.github.com/post/snarf-pgp-keys-in-emacs-mu4e</id><published>2013-08-25T00:00:00Z</published><updated>2013-08-25T00:00:00Z</updated><summary type="html"> </summary><content type="html">&lt;p&gt;I just moved to &lt;a href=&#34;http://www.djcbsoftware.nl/code/mu/&#34; title=&#34;mu mail reader&#34;&gt;mu&lt;/a&gt; for reading my email.  One feature I was
missing was the ability to receive &lt;a href=&#34;http://en.wikipedia.org/wiki/Pretty_Good_Privacy&#34; title=&#34;Pretty Good Privacy&#34;&gt;PGP&lt;/a&gt; keys for signed
messages.&lt;/p&gt;

&lt;p&gt;When you receive a signed message, &lt;code&gt;mu&lt;/code&gt; shows the verification status
in the &lt;code&gt;Signature&lt;/code&gt; field in the message view (see
&lt;a href=&#34;http://www.djcbsoftware.nl/code/mu/mu4e/MSGV-Crypto.html#MSGV-Crypto&#34; title=&#34;mu message cryptography&#34;&gt;MSGV-Crypto&lt;/a&gt;).  If you don&amp;rsquo;t have the sender&amp;rsquo;s PGP key on
your keyring, this will show &lt;code&gt;unverified&lt;/code&gt;.  Click on the &lt;code&gt;Details&lt;/code&gt;
link within field will show the sender&amp;rsquo;s key id.  To manually import
the key you can use &lt;a href=&#34;http://www.gnupg.org/&#34; title=&#34;GNU Privacy Guard&#34;&gt;&lt;code&gt;gpg&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gpg --recv &amp;lt;the-key-id&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This seemed a little labourious, so some automation was in order.
&lt;code&gt;mu4e&lt;/code&gt; allows you to define actions that can be run on messages (or
attachments), so I just wrote an action to do this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;lisp&#34;&gt;(defun mu4e-view-snarf-pgp-key (&amp;amp;optional msg)
  &amp;quot;Snarf the pgp key for the specified message.&amp;quot;
  (interactive)
  (let* ((msg (or msg (mu4e-message-at-point)))
          (path (mu4e-message-field msg :path))
          (cmd (format &amp;quot;%s verify --verbose %s&amp;quot;
                 mu4e-mu-binary
                 (shell-quote-argument path)))
          (output (shell-command-to-string cmd)))
    (let ((case-fold-search nil))
      (when (string-match &amp;quot;key:\\([A-F0-9]+\\)&amp;quot; output)
        (let* ((cmd (format &amp;quot;%s --recv %s&amp;quot;
                            epg-gpg-program (match-string 1 output)))
               (output (shell-command-to-string cmd)))
          (message output))))))

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This works by parsing the output of the &lt;code&gt;mu&lt;/code&gt; program itself, as
displayed in the &lt;code&gt;Details&lt;/code&gt; window, to obtain the PGP key id.  It then
executes the &lt;code&gt;gpg --recv&lt;/code&gt; command, parsing in the parsed key id.&lt;/p&gt;

&lt;p&gt;To install the action, we simply add it to &lt;code&gt;mu4e-view-actions&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;lisp&#34;&gt;(add-to-list &#39;mu4e-view-actions
             &#39;(&amp;quot;Snarf PGP keys&amp;quot; . mu4e-view-snarf-pgp-key) t)
&lt;/code&gt;&lt;/pre&gt;
</content></entry>

</feed>
