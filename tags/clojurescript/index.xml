<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns='http://www.w3.org/2005/Atom' xml:lang='en-us'>
 <title>pelure</title>
 <id>http://hugoduncan.github.com/</id>
 <link href='./' />
 <link rel='self' href='' />
 <logo>rsslogo.jpg</logo>
 <icon>/favicon.ico</icon>
 <author><name>Hugo Duncan</name></author>
 <subtitle>Pelure </subtitle>
 <rights>All content written by Hugo Duncan and photos by Hugo Duncan Copyright Hugo Duncan, all rights reserved.</rights> 
 <updated>2013-08-29T00:00:00Z</updated>


<entry xml:base="http://hugoduncan.github.com/post/clojurescript-libs-with-js-dependencies"><title>How to Build Clojurescript Libs with JavaScript Dependencies</title><link href="http://hugoduncan.github.com/post/clojurescript-libs-with-js-dependencies"/><id>http://hugoduncan.github.com/post/clojurescript-libs-with-js-dependencies</id><published>2013-08-16T00:00:00Z</published><updated>2013-08-16T00:00:00Z</updated><summary type="html"> </summary><content type="html">&lt;p&gt;Using JavaScript dependencies in a Clojurescript library seems to be hard.  It
took me many hours to understand how it should work.  A big thanks to
&lt;a href=&#34;http://cemerick.com&#34; title=&#34;Chas Emerick&#34;&gt;Chas Emerick&lt;/a&gt; for setting me straight on most of this.&lt;/p&gt;

&lt;p&gt;Luke Vanderhart &lt;a href=&#34;http://lukevanderhart.com/2011/09/30/using-javascript-and-clojurescript.html&#34; title=&#34;Luke Vanderhart&#39;s post on JavaScript libs&#34;&gt;posted&lt;/a&gt; a general introduction to using Javascript
libraries in Clojurescript.  Go read it if you haven&amp;rsquo;t already - this post
assumes you have.&lt;/p&gt;

&lt;p&gt;While that post is an excellent description of using JavaScript in
a Clojurescript application, it doesn&amp;rsquo;t really address JavaScript in
Clojurescript libraries, which has the additional problem of how to ensure the
JavaScript dependency is available in the consumer of the library.  A
Clojurescript library should definitely be capable of providing it&amp;rsquo;s
dependencies, but should also allow the consumer to override the version of
these dependencies.&lt;/p&gt;

&lt;h2&gt;Don&amp;rsquo;t package the JavaScript&lt;/h2&gt;

&lt;p&gt;The first approach is to simply not provide the JavaScript at all.  This is the
approach taken by &lt;a href=&#34;https://github.com/ibdknox/jayq&#34; title=&#34;jayq&#34;&gt;jayq&lt;/a&gt; for example.  The consumer of jayq, or any
library that uses jayq, is required to provide jQuery through the JavaScript
runtime.  This can take the form of a &lt;code&gt;&amp;amp;lt;script&amp;amp;gt;&lt;/code&gt; link in the browser page,
or a call to &lt;code&gt;webPage#injectJs&lt;/code&gt; in phantomJS.  The compile &lt;code&gt;:libs&lt;/code&gt; or
&lt;code&gt;:foreign-libs&lt;/code&gt; options can not be used to provide the dependency, as there is
no way for the compiler to know that jayq depends on the namespace provided by
these options.&lt;/p&gt;

&lt;p&gt;For the consumer of the library to use compiler&lt;code&gt;:optimizations&lt;/code&gt; other than
&lt;code&gt;:whitespace&lt;/code&gt;, they will need to provide an &lt;code&gt;:externs&lt;/code&gt; file.&lt;/p&gt;

&lt;h2&gt;Package JavaScript&lt;/h2&gt;

&lt;p&gt;The second approach is to package the JavaScript via a Clojurescript namespace.
This involves adding a &lt;code&gt;require&lt;/code&gt; on a namespace to the code that directly
depends on the JavaScript, and arranging for that Clojurescript namespace to
load the JavaScript, using either of the compiler&lt;code&gt;:libs&lt;/code&gt; or &lt;code&gt;:foreign-libs&lt;/code&gt;
options.&lt;/p&gt;

&lt;p&gt;The Clojurescript library can make the JavaScript library available in its
resources.  The library consumer can then use resource via the &lt;code&gt;:libs&lt;/code&gt; or
&lt;code&gt;:foreign-libs&lt;/code&gt; options, depending on whether or not the JavaScript contains a
&lt;code&gt;goog.provides&lt;/code&gt; call.&lt;/p&gt;

&lt;p&gt;If the library is packaged with a &lt;code&gt;goog.provides&lt;/code&gt; call, then the consumer can
not replace the version using &lt;code&gt;:libs [&amp;quot;&amp;quot;]&lt;/code&gt; - the use of an explicit prefix in
&lt;code&gt;:libs&lt;/code&gt; is needed to prevent more than one JavaScript implementation trying to
provide the clojure namespace, or the use of &lt;code&gt;:foreign-libs&lt;/code&gt; where the namespace
is explicitly mapped.&lt;/p&gt;

&lt;p&gt;For examples, the &lt;a href=&#34;https://github.com/cemerick/pprng&#34; title=&#34;pprng&#34;&gt;pprng&lt;/a&gt; library packages its dependency with a
&lt;code&gt;goog.provides&lt;/code&gt; call, allowing the use of &lt;code&gt;:libs [&amp;quot;&amp;quot;]&lt;/code&gt; to pull in the
dependency.  The &lt;a href=&#34;https://github.com/hugoduncan/papadom&#34; title=&#34;papadom&#34;&gt;papadom&lt;/a&gt; library on the other hand provides vanilla
javascript dependencies, and requires the use of the more verbose
&lt;code&gt;:foreign-libs&lt;/code&gt; option.&lt;/p&gt;

&lt;p&gt;If the JavaScript is to be provided in the runtime, then the consumer will have
to provide an empty namespace definition to satisfy the require in the
Clojurescript library, and the&lt;code&gt;:externs&lt;/code&gt; file as in the first case.&lt;/p&gt;

&lt;h2&gt;Postscript&lt;/h2&gt;

&lt;p&gt;There are several assumptions in much of the documentation that I didn&amp;rsquo;t see
explicitly explained.  I&amp;rsquo;ll record these here for posterity.&lt;/p&gt;

&lt;p&gt;A clojurescript library is always a source code library.  There is no such thing
as the linking of compiled clojurescript artifacts.&lt;/p&gt;

&lt;p&gt;Neither&lt;code&gt;:libs&lt;/code&gt; nor&lt;code&gt;:foreign-libs&lt;/code&gt; actually changes how the JavaScript is
accessed within the clojurescript code.  If you include jQuery via a &lt;code&gt;:libs&lt;/code&gt;,
and a &lt;code&gt;require&lt;/code&gt;, you still access it through &lt;code&gt;js/jQuery&lt;/code&gt;.  The &lt;code&gt;require&lt;/code&gt; of the
namespace specified by &lt;code&gt;goog.provide&lt;/code&gt;, or the namespace specified in the
&lt;code&gt;:foreign-libs&lt;/code&gt;&amp;rsquo; &lt;code&gt;:provides&lt;/code&gt; key, simply ensures the JavaScript is loaded.&lt;/p&gt;

&lt;p&gt;The choice of compiler &lt;code&gt;:optimizations&lt;/code&gt; affects what information you need to
provide, and this differs depending on whether you are providing javascript
libraries through the runtime (e.g. $lt;script&amp;gt; tags in the browser), or
through &lt;code&gt;:libs&lt;/code&gt; or &lt;code&gt;:foreign-libs&lt;/code&gt; compiler options.  The simplest here is to
use the compiler options.  When providing the JavaScript via the runtime, then
everything should also just work if you are using no optimisation, or
just &lt;code&gt;:whitespace&lt;/code&gt;, but as soon as you try anything else, you will need to
provide an :externs definition for the JavaScript libraries.&lt;/p&gt;
</content></entry>

<entry xml:base="http://hugoduncan.github.com/post/webapp_with_core.async"><title>Exploring a todo app with core.async</title><link href="http://hugoduncan.github.com/post/webapp_with_core.async"/><id>http://hugoduncan.github.com/post/webapp_with_core.async</id><published>2013-08-15T00:00:00Z</published><updated>2013-08-15T00:00:00Z</updated><summary type="html"> </summary><content type="html">&lt;p&gt;We&amp;rsquo;re going to build an equivalent of the &lt;a href=&#34;http://angularjs.org/#add-some-control&#34; title=&#34;Angular TODO example&#34;&gt;AngularJS TODO example&lt;/a&gt;
using core.async, and a templating library, &lt;a href=&#34;https://github.com/hugoduncan/papadom&#34; title=&#34;Papadom templating library&#34;&gt;papadom&lt;/a&gt;, that I&amp;rsquo;ve
written to help in this.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/clojure/clojurescript&#34; title=&#34;Clojurescript&#34;&gt;Clojurescript&lt;/a&gt; recently gained a &lt;a href=&#34;http://en.wikipedia.org/wiki/Communicating_sequential_processes&#34; title=&#34;Communicating Sequential Processes&#34;&gt;CSP&lt;/a&gt; implemetation via
&lt;a href=&#34;http://clojure.com/blog/2013/06/28/clojure-core-async-channels.html&#34; title=&#34;Clojure core.async Channels&#34;&gt;core.async&lt;/a&gt;, similar to &lt;a href=&#34;http://golang.org/ref/spec#Channel_types&#34; title=&#34;Go Channels&#34;&gt;Go&amp;rsquo;s channels&lt;/a&gt;, or
&lt;a href=&#34;http://www.cs.cornell.edu/Courses/cs312/2006fa/recitations/rec24.html&#34; title=&#34;CML Channels&#34;&gt;CML&amp;rsquo;s channels&lt;/a&gt; (CML also has a nice select).  Bruce Haumann
started exploring this with &lt;a href=&#34;http://rigsomelight.com/2013/07/18/clojurescript-core-async-todos.html&#34; title=&#34;Bruce Haumann&#39;s &#39;ClojureScript Core.Async Todos&#39;&#34;&gt;ClojureScript Core.Async Todos&lt;/a&gt;, and
David Nolen has been looking at how to use core.async for
&lt;a href=&#34;http://swannodette.github.io/2013/07/31/extracting-processes/&#34; title=&#34;David Nolan&#39;s &#39;CSP is Responsive Design&#39;&#34;&gt;responsive design&lt;/a&gt;.  In this post, we&amp;rsquo;ll take the TODO example,
and take it a little further.&lt;/p&gt;

&lt;h2&gt;Basic Display&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;ll start with just displaying a list of todo items.  For this we&amp;rsquo;ll need a
template, so we&amp;rsquo;ll just write this in HTML, and add a &lt;code&gt;t-template&lt;/code&gt; attribute,
which enables us to use mustache style templating of values to display.  This
doesn&amp;rsquo;t use mustache sections for looping, in order to preserve valid HTML
markup.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;&amp;lt;h1&amp;gt;TODOS&amp;lt;/h1&amp;gt;
&amp;lt;ul class=&amp;quot;unstyled&amp;quot;&amp;gt;
  &amp;lt;li t-template=&amp;quot;todos&amp;quot;&amp;gt;{{text}}&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To get this to show something we&amp;rsquo;ll need some code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;clj&#34;&gt;(ns app
  (:require
   [papadom.template :refer [compile-templates render]]))

(defn start []
  (compile-templates)
  (render {:todos [{:text &amp;quot;learn papadom&amp;quot; :done false}
                   {:text &amp;quot;write a papadom app&amp;quot; :done false}]}))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you call &lt;code&gt;app.start()&lt;/code&gt; from the page containing the above template, you&amp;rsquo;ll
see a list of two todo entries.&lt;/p&gt;

&lt;h2&gt;Adding an event&lt;/h2&gt;

&lt;p&gt;Now we have something displayed, lets add a checkbox to mark todo items as done:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;&amp;lt;ul class=&amp;quot;unstyled&amp;quot;&amp;gt;
  &amp;lt;li t-template=&amp;quot;todos&amp;quot;&amp;gt;
    &amp;lt;input type=&amp;quot;checkbox&amp;quot; t-prop=&amp;quot;done&amp;quot; t-event=&amp;quot;done&amp;quot;
           t-id=&amp;quot;index&amp;quot; index=&amp;quot;{{@index}}&amp;quot;&amp;gt;
    &amp;lt;span&amp;gt;{{text}}&amp;lt;/span&amp;gt;
  &amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;t-prop&lt;/code&gt; attribute tells the template to which data value to display as the
checkbox.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;t-event&lt;/code&gt; attribute specifies that we want an event.  When the checkbox is
clicked, we will get a core.async message with a &lt;code&gt;:done&lt;/code&gt; event type.  We need to
know which todo was clicked, so we use the &lt;code&gt;t-id&lt;/code&gt; attribute to list the
attributes whose values should be sent as the event data &amp;ndash; in this case the
index, which has a value based on handlebars style &lt;code&gt;@index&lt;/code&gt; property.&lt;/p&gt;

&lt;p&gt;Now we need some code to process the events.  To do this we&amp;rsquo;ll define an
&lt;code&gt;app&lt;/code&gt; function that will be passed a state atom containing a map with our todos
state, and a core.async channel from which to read events.  The function will
loop over events, and dispatch them as required.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;clj&#34;&gt;(defn app
  [state event-chan]
  (go
   (loop [[event event-data] (&amp;lt;! event-chan)]
     (case event
       :done
       (let [nv (boolean (:checked event-data))]
         (swap! state assoc-in [:todos (:index event-data) :done] nv)))
     (recur (&amp;lt;! event-chan)))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When the &lt;code&gt;app&lt;/code&gt; function receives a &lt;code&gt;:done&lt;/code&gt; event, it will update the state atom
appropriately.  Now we have our state updating, we&amp;rsquo;ll need to display it, which
we can again do with the &lt;code&gt;render&lt;/code&gt; function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;clj&#34;&gt;(defn show-state [state]
  (render &amp;quot;state&amp;quot; state))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We still need to get &lt;code&gt;show-state&lt;/code&gt; called, and we&amp;rsquo;ll arrange this in a modified
&lt;code&gt;start&lt;/code&gt; function.  This will create an atom for the state, and add a watch on
the atom that will call &lt;code&gt;show-state&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;clj&#34;&gt;(defn start
  []
  (let [event-chan (chan)
        state (atom nil)]
    (compile-templates)
    (template-events event-chan)
    (add-watch state :state (fn [key ref old new] (show-state new)))
    (reset! state {:todos [{:text &amp;quot;Learn papadom&amp;quot; :done false}
                           {:text &amp;quot;Build a papadom app&amp;quot; :done false}]})
    (app state event-chan))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We&amp;rsquo;ve also added a core.async channel, &lt;code&gt;event-chan&lt;/code&gt;, which we&amp;rsquo;ve passed to
&lt;code&gt;template-events&lt;/code&gt; to arrange delivery of the events defined in our template.  We
pass this channel to the &lt;code&gt;app&lt;/code&gt; function to start processing the events.&lt;/p&gt;

&lt;p&gt;This shows the basic structure of the application.&lt;/p&gt;

&lt;h2&gt;Adding New Todo Elements&lt;/h2&gt;

&lt;p&gt;To allow you to add new todo items, we&amp;rsquo;ll add a form to our template,
specifying a &lt;code&gt;t-event&lt;/code&gt; attribute, which will cause an event to be sent when the
form is submitted, with the form&amp;rsquo;s input values as the event data.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;&amp;lt;form t-event=&amp;quot;add-todo&amp;quot;&amp;gt;
  &amp;lt;input type=&amp;quot;text&amp;quot; t-prop=&amp;quot;text&amp;quot; size=&amp;quot;30&amp;quot; placeholder=&amp;quot;add new todo here&amp;quot;&amp;gt;
  &amp;lt;input class=&amp;quot;btn btn-primary&amp;quot; type=&amp;quot;submit&amp;quot; value=&amp;quot;add&amp;quot;&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To process this new event, we&amp;rsquo;ll add a case to the &lt;code&gt;app&lt;/code&gt; function loop&amp;rsquo;s &lt;code&gt;case&lt;/code&gt;
form.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;clj&#34;&gt;:add-todo
(swap! state update-in [:todos]
       conj {:text (:text (input-seq-&amp;gt;map event-data))
             :done false})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This uses the &lt;code&gt;input-seq-&amp;gt;map&lt;/code&gt; helper to convert the data from the form into a
map, and we extract the &lt;code&gt;:text&lt;/code&gt; value (defined by &lt;code&gt;t-prop&lt;/code&gt; in the &lt;code&gt;input&lt;/code&gt;
element).&lt;/p&gt;

&lt;p&gt;And we&amp;rsquo;re done.  To see a full working example have a look at the
&lt;a href=&#34;https://github.com/hugoduncan/papadom/blob/master/examples/todo/resources/public/index.html&#34; title=&#34;TODO HTML Template&#34;&gt;template&lt;/a&gt; and &lt;a href=&#34;https://github.com/hugoduncan/papadom/blob/master/examples/todo/src/papadom/example/todo.cljs&#34; title=&#34;TODO Clojurescript Code&#34;&gt;code&lt;/a&gt; in the todo example of papadom.
To run the example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;git clone https://github.com/hugoduncan/papadom.git
cd papadom/examples/todo
lein ring server
&lt;/code&gt;&lt;/pre&gt;
</content></entry>

</feed>
