<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Pelure</title>
  <link href="http://hugoduncan.org/index.xml" rel="self"/>
  <link href="http://hugoduncan.org/"/>
  <updated>2021-11-15T01:45:47+00:00</updated>
  <id>http://hugoduncan.org/</id>
  <author>
    <name>Hugo Duncan</name>
  </author>
  <entry>
    <id>http://hugoduncan.org/post/configure_nagios_using_pallet.html</id>
    <link href="http://hugoduncan.org/post/configure_nagios_using_pallet.html"/>
    <title>Configure Nagios using Pallet</title>
    <summary>Basic Nagios support was recently added to pallet, and while very simple to use, this blog post should make it even simpler. The overall philosophy is to configure the nagios service monitoring definitions along with the service itself, rather than have monolithic nagios configuration, divorced from the configuration of the various nodes.</summary>
    <updated>2010-08-18T23:59:59+00:00</updated>
    <content type="html">
      <![CDATA[<p><p>Basic Nagios support was recently added to <a href="http://github.com/hugoduncan/pallet">pallet</a>, and while very simple to use, this blog post should make it even simpler. The overall philosophy is to configure the nagios service monitoring definitions along with the service itself, rather than have monolithic nagios configuration, divorced from the configuration of the various nodes.</p></p><p><p>As an example, we can configure a machine to have it's ssh service, CPU load, number of processes and number of users monitored. Obviously, you would normally be monitoring several different types of nodes, but there is no difference as far as pallet is concerned.</p></p><p><p>We start by requiring various pallet components.  These would normally be part of a <code>ns</code> declaration, but are provided here for ease of use at the REPL.</p></p><p><pre class="clojure"> (require   '[pallet.crate.automated-admin-user
    :as admin-user]   '[pallet.crate.iptables :as 'iptables]   '[pallet.crate.ssh :as ssh]   '[pallet.crate.nagios-config
     :as nagios-config]   '[pallet.crate.nagios :as nagios]   '[pallet.crate.postfix :as postfix]   '[pallet.resource.service :as service]) </pre></p><p><h2>Node to be Monitored by Nagios</h2></p><p><p>Now we define the node to be monitored. We set up a machine that has <abbr>SSH</abbr> running, and configure <code>iptables</code> to allow access to <abbr>SSH</abbr>, with a throttled connection rate (six connections/minute by default).</p></p><p><pre class="clojure"> (pallet.core/defnode monitored   []   :bootstrap [(admin-user/automated-admin-user)]   :configure [;; set iptables for restricted access
              (iptables/iptables-accept-icmp)
              (iptables/iptables-accept-established)
              ;; allow connections to ssh
              ;; but throttle connection requests
              (ssh/iptables-throttle)
              (ssh/iptables-accept)]) </pre></p><p><p>Monitoring of the <abbr>SSH</abbr> service is configured by simply adding <code>(ssh/nagios-monitor)</code>.</p></p><p><p>Remote monitoring is implemented using nagios' <code>nrpe</code> plugin, which we add with <code>(nagios-config/nrpe-client)</code>.  To make nrpe accessible to the nagios server, we open the that the nrpe agent runs on using <code>(nagios-config/nrpe-client-port)</code>, which restricts access to the nagios server node. We also add a phase, :restart-nagios, that can be used to restart the nrpe agent.</p></p><p><p>Pallet comes with some configured nrpe checks, and we add <code>nrpe-check-load</code>, <code>nrpe-check-total-proces</code> and <code>nrpe-check-users</code>. The final configuration looks like this:</p></p><p><pre class="clojure"> (pallet.core/defnode monitored   []   :bootstrap [(admin-user/automated-admin-user)]   :configure [;; set iptables for restricted access
              (iptables/iptables-accept-icmp)
              (iptables/iptables-accept-established)
              ;; allow connections to ssh
              ;; but throttle connection requests
              (ssh/iptables-throttle)
              (ssh/iptables-accept)
              ;; monitor ssh
              (ssh/nagios-monitor)
              ;; add nrpe agent, and only allow
              ;; connections from nagios server
              (nagios-config/nrpe-client)
              (nagios-config/nrpe-client-port)
              ;; add some remote checks
              (nagios-config/nrpe-check-load)
              (nagios-config/nrpe-check-total-procs)
              (nagios-config/nrpe-check-users)]   :restart-nagios [(service/service
                    "nagios-nrpe-server"
                    :action :restart)]) </pre></p><p><h2>Nagios Server</h2> <p>We now configure the nagios server node. The nagios server is installed with <code>(nagios/nagios "nagiospwd")</code>, specifying the password for the nagios web interface, and add a phase, :restart-nagios, that can be used to restart nagios.</p></p><p><p>Nagios also requires a <abbr>MTA</abbr> for notifications, and here we install postfix.  We add a contact, which we make a member of the "admins" contact group, which is notified as part of the default host and service templates.</p></p><p><pre class="clojure"> (pallet.core/defnode nagios   []   :bootstrap [(admin-user/automated-admin-user)]   :configure [;; restrict access
              (iptables/iptables-accept-icmp)
              (iptables/iptables-accept-established)
              (ssh/iptables-throttle)
              (ssh/iptables-accept)
              ;; configure MTA
              (postfix/postfix
               "pallet.org" :internet-site)
              ;; install nagios
              (nagios/nagios "nagiospwd")
              ;; allow access to nagios web site
              (iptables/iptables-accept-port 80)
              ;; configure notifications
              (nagios/contact
              {:contact<i>name "hugo"
               :service</i>notification<i>period "24x7"
               :host</i>notification<i>period "24x7"
               :service</i>notification<i>options
                  "w,u,c,r"
               :host</i>notification<i>options
                  "d,r"
               :service</i>notification<i>commands
                 "notify-service-by-email"
               :host</i>notification_commands
                  "notify-host-by-email"
               :email "my.email@my.domain"
               :contactgroups [:admins]})]   :restart-nagios [(service/service "nagios3"
                     :action :restart)]) </pre></p><p><h2>Trying it out</h2> <p>That's it. To fire up both machines, we use pallet's <code>converge</code> command.</p></p><p><pre class="clojure"> (pallet.core/converge   {monitored 1 nagios 1} service   :configure :restart-nagios) </pre></p><p><p>The nagios web interface is then accessible on the <code>nagios</code> node with the <code>nagiosadmin</code> user and specified password.  Real world usage would probably have several different monitored configurations, and restricted access to the <code>nagios</code> node.</p></p><p><h2>Still to do...</h2> <p>Support for nagios is not complete (e.g. remote command configuration still needs to be added, and it has only been tested on Ubuntu), but I would appreciate any feedback on the general approach.</p></p>]]>
    </content>
  </entry>
  <entry>
    <id>http://hugoduncan.org/post/a_clojure_library_for_fluiddb.html</id>
    <link href="http://hugoduncan.org/post/a_clojure_library_for_fluiddb.html"/>
    <title>A Clojure library for FluidDB</title>
    <summary>I have released Criterium, a new project for benchmarking code in Clojure.  I found Brent Broyer's article on Java benchmarking which explains many of the pitfalls of benchmarking on the JVM, and Criterion, a benchmarking library in Haskell.</summary>
    <updated>2009-09-13T23:59:59+00:00</updated>
    <content type="html">
      <![CDATA[<p><p><a href="http://fluidinfo.com/">FluidDB</a>, a "cloud" based triple-store, where the objects are immutable and can be tagged by anyone, launched about a month ago. As a another step to getting up to speed with <a href="http://clojure.org">Clojure</a>, I decided to write a client library, and <a href="http://github.com/hugoduncan/clj-fluiddb">clj-fluiddb</a> was born.  The code was very simple, especially as I could base the library on <a href="http://github.com/hdurer/cl-fluiddb">cl-fluiddb</a>, a Common-Lisp library.</p> <p>I have some ideas I want to try out using FluidDB.  It's permission system is one of it's <a href="http://abouttag.blogspot.com/2009/09/permissions-worth-getting-excited-about.html">best features</a>, together with the ability to <a href="http://www.xavierllora.net/2009/08/25/liquid-rdf-meandering-in-fluiddb/">use it for RDF like triples</a> means that it could provide a usable basis for growing the semantic web.  My ideas are less grandiose, but might take as long to develop, we'll see...</p></p>]]>
    </content>
  </entry>
  <entry>
    <id>http://hugoduncan.org/post/product_development_flow.html</id>
    <link href="http://hugoduncan.org/post/product_development_flow.html"/>
    <title>Product Development Flow</title>
    <summary>I have spent the last few months with my latest start-up, Artfox, where I have been trying to push home some of the lean start-up advice expounded by Eric Lie's and Steve Blank.  I was hoping that 'The Principles of Product Development Flow', by Donald Reinertsen, might help me in making a persuasive argument for some of the more troublesome concepts around minimum viable product and ensuring that feedback loops are in place with your customers as soon as possible. Unfortunately, I don't think that this is the book if you are looking for immediate, practical prescription, but it is a thought provoking, rigorous view of the product development process, that pulls together ideas from manufacturing, telecommunications and the Marines.</summary>
    <updated>2009-08-30T23:59:59+00:00</updated>
    <content type="html">
      <![CDATA[<p><p>I have spent the last few months with my latest start-up, <a href="http://artfox.com">Artfox</a>, where I have been trying to push home some of the lean start-up advice expounded by <a href="http://startuplessonslearned.blogspot.com">Eric Ries</a> and <a href="http://steveblank.com/">Steve Blank</a>.  I was hoping that "The Principles of Product Development Flow", by <a href="http://www.reinertsenassociates.com/">Donald Reinertsen</a>, might help me in making a persuasive argument for some of the more troublesome concepts around minimum viable product and ensuring that feedback loops are in place with your customers as soon as possible. Unfortunately, I don't think that this is the book if you are looking for immediate, practical prescription, but it is a thought provoking, rigorous view of the product development process, that pulls together ideas from manufacturing, telecommunications and the Marines.</p></p><p><p>Perhaps Reinertsen's most accessible advice is that decisions in product development should be based on a strong economic foundation, pulled together by a concept of the "Cost of Delay".  Rather than on relying on prescriptions for each of several interconnected metrics, such as efficiency and utilisation, Reinertsen suggests that economics will provide different targets for each of these metrics depending on the costs of the project at hand.</p></p><p><p>His proposition that product development organisations should measure "Design in Process", similar to the idea of "Intellectual Working In Process" proposed by Thomas Stewart in his book "Intellectual Capital", is what allows him to make the parallels to manufacturing and queueing theory and enables the application of the wide body of work in these fields to product development.</p></p><p><p>His practical advice, such as working in small batches and using a cadence for activities that require coordination, will come as no surprise to practitioners of agile development, and Reinertsen provides clear reasoning of why these practices work.</p></p><p><p>During my time at Alcan, and later Novelis, I gave a lot of thought to scheduling, queues and cycle times in a transformation based manufacturing environment, and I found that this had many parallels to his view of the product development process, and little in common with what Reinertsen describes as manufacturing, which seems to be limited to high volume assembly type operations.  I found many ideas that could be usefully taken back to a manufacturing context.</p></p><p><p>If you look at this book as an introduction to scheduling, queueing theory and the reason's behind some of agile development practices, then you will not be disappointed.</p></p>]]>
    </content>
  </entry>
  <entry>
    <id>http://hugoduncan.org/post/rails_environments_for_lisp.html</id>
    <link href="http://hugoduncan.org/post/rails_environments_for_lisp.html"/>
    <title>Rails Environments For Lisp</title>
    <summary>The facility of Ruby on Rails' test, development and production environments is one of those features that goes almost unremarked, but which makes using rails more pleasant.  No doubt everyone has their own solution for this in other environments, and while I am sure Common Lisp is not lacking in examples, I have not seen an idiomatic implementation.  In developing cl-blog-generator I came up with the following solution.</summary>
    <updated>2009-04-07T23:59:59+00:00</updated>
    <content type="html">
      <![CDATA[<p><p>The facility of Ruby on Rails' test, development and production environments is one of those features that goes almost unremarked, but which makes using rails more pleasant.  No doubt everyone has their own solution for this in other environments, and while I am sure Common Lisp is not lacking in examples, I have not seen an idiomatic implementation.  In developing <a href="http://github.com/hugoduncan/cl-blog-generator">cl-blog-generator</a> I came up with the following solution.</p> <p>Configuration in Common Lisp usually depends on using special variables, which can be rebound across any block of code.  I started by putting the configuration of my blog into s-expressions in files, but got tired of specifying the file names for different blogs.  Instead, I created an association list for each configuration, and registered each using a symbol as key.  I can now switch to a given environment by specifying the symbol for the environment. </p> <p>The implementation (in <code>src/configure.lisp</code> under the <a href="http://github.com/hugoduncan/cl-blog-generator">GitHub repository</a>) consists of two functions and a special variable.  <code>SET-ENVIRONMENT</code> is used to register an environment, and <code>CONFIGURE</code> is used to make an environment active.  The environments are stored in <code><em>ENVIRONMENTS</em></code> special as an association list.  An example of setting up the configurations can be seen in the <code>config.lisp</code> file.  In creating the configurations I drop the '*' from the special names.</p> <p>I'm relatively new to CL, so let me now if I have overlooked anything.  Writing this post makes me think I am missing a <code>WITH-ENVIRONMENT</code> macro ...</p></p>]]>
    </content>
  </entry>
  <entry>
    <id>http://hugoduncan.org/post/cl_blog_generator_gets_comments.html</id>
    <link href="http://hugoduncan.org/post/cl_blog_generator_gets_comments.html"/>
    <title>cl-blog-generator Gets Comments</title>
    <summary>I have now added a comment system to cl-blog-generator.  My requirements were for a simple, low overhead, commenting system, preferable one that could possibly be fully automated.</summary>
    <updated>2009-03-31T23:59:59+00:00</updated>
    <content type="html">
      <![CDATA[<p><p>I have now added a comment system to <a href="http://github.com/hugoduncan/cl-blog-generator">cl-blog-generator</a>.  My requirements were for a simple, low overhead, commenting system, preferable one that could possibly be fully automated.</p></p><p><p>The comment system was inspired by <a href="http://www.steve.org.uk/Software/chronicle/">Chronicle</a>'s, with a slight modification in approach - the comments are never saved on the web server, and are just sent by email to a dedicated email address.  Spam filtering is delegated to the whatever spam filtering is implemented on the mail server, or in your email client.  The comment emails are then processed in CL using <a href="http://common-lisp.net/project/mel-base/">mel-base</a> and written to the local filesystem.  Moderation can optionally occur on the CL side, if that is preferable to using the email client.</p></p><p><p>There is still some work left to do - I would like to be able to switch off comments on individual posts, either on demand on after a default time period - but I thought I would let real world usage drive my development.</p></p>]]>
    </content>
  </entry>
</feed>
