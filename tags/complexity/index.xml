<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns='http://www.w3.org/2005/Atom' xml:lang='en-us'>
 <title>pelure</title>
 <id>http://hugoduncan.github.com/</id>
 <link href='./' />
 <link rel='self' href='' />
 <logo>rsslogo.jpg</logo>
 <icon>/favicon.ico</icon>
 <author><name>Hugo Duncan</name></author>
 <subtitle>Pelure </subtitle>
 <rights>All content written by Hugo Duncan and photos by Hugo Duncan Copyright Hugo Duncan, all rights reserved.</rights> 
 <updated>2013-08-26T00:00:00Z</updated>


<entry xml:base="http://hugoduncan.github.com/post/frameworks_and_productivity"><title>Frameworks and Productivity</title><link href="http://hugoduncan.github.com/post/frameworks_and_productivity"/><id>http://hugoduncan.github.com/post/frameworks_and_productivity</id><published>2009-03-20T00:00:00Z</published><updated>2009-03-20T00:00:00Z</updated><summary type="html"> </summary><content type="html">&lt;p&gt;&lt;p&gt;Yesterday was frustrating; I spent far too long trying to debug some problems in a Rails application I am writing.  Rails, and frameworks in general, are supposed to give us improved productivity by hiding the complexity and mechanics of the task at hand.  This is great as long as the framework behaves as expected, but invariably causes problems when things go wrong.&lt;/p&gt;
&lt;h2&gt;The missing field&lt;/h2&gt;
My application uses associations, and I had a &lt;code&gt;belongs_to&lt;/code&gt; association that was supposed to be populated in a &lt;code&gt;before_validation_on_create&lt;/code&gt; callback.  In my tests I noticed that the linked model was not being instantiated.  After much searching, it turns out I had forgotten to create the foreign key field.  Unfortunately Rails was silent on this issue and the &lt;code&gt;belongs_to&lt;/code&gt; association code seemed to execute quite happily without the field.
&lt;h2&gt;Can&amp;rsquo;t dup NilClass&lt;/h2&gt;
My models also use &lt;code&gt;has_many&lt;/code&gt; associations, which I could populate with no problems.  When I tried to access the association though, I kept getting &lt;code&gt;Can&amp;rsquo;t dup NilClass&lt;/code&gt; errors.  This one turned out to be an issue with the generated &lt;code&gt;collection.build&lt;/code&gt; method.  As noted in the documentation by the somewhat cryptic &lt;cite&gt;Note: This only works if an associated object already exists, not if it‘s nil!&lt;/cite&gt;, the method fails if the collection is empty (at least that&amp;rsquo;s what I think it means). Explicitly instantiating the associated model and then adding it to the collection fixed the problem.
&lt;h2&gt;Bad choice of name&lt;/h2&gt;
&lt;p&gt;In my application I had a model named &lt;code&gt;Target&lt;/code&gt;, which meant that models that associate with &lt;code&gt;Target&lt;/code&gt;, such as my &lt;code&gt;TargetProfile&lt;/code&gt; model, have a &lt;code&gt;target&lt;/code&gt; attribute.&lt;/p&gt;  Unfortunately the &lt;code&gt;target&lt;/code&gt; attribute in &lt;code&gt;TargetProfile&lt;/code&gt; always returned the instance of &lt;code&gt;TargetProfile&lt;/code&gt; - not quite what is expected.  The problem was caused by the fact that &lt;code&gt;ActiveRecord&lt;/code&gt;&amp;rsquo;s &lt;code&gt;AssociationProxy&lt;/code&gt;, used to implement associations between models, has a &lt;code&gt;target&lt;/code&gt; attribute.  The documentation contains another warning &lt;cite&gt;Don‘t create associations that have the same name as instance methods of ActiveRecord::Base&lt;/cite&gt;, but mentions nothing of &lt;code&gt;AssociationProxy&lt;/code&gt;, which isn&amp;rsquo;t even part of the documented api.  I call this broken encapsulation.
&lt;h2&gt;The Rails Way&lt;/h2&gt;
Rails heavily promotes testing and Test Driven Development (TDD), which is linked to the &amp;ldquo;fail early, fail fast&amp;rdquo; paradigm.  It seems strange that known issues (as partially documented) are allowed to persist and cause silent failures.  All the issues above could have been flagged by Rails.
&lt;h2&gt;Conclusion&lt;/h2&gt;
I am not picking on Rails, however, as these type of issues seem to occur in many frameworks.  No software is bug free, and a framework has to work hard to hide the complexity and mechanics of its domain.  When things go wrong, we are always left questioning whether the issue is in the framework or in our application and we invariably end up getting to know the implementation details of the framework, which does little for our productivity.&lt;/p&gt;
</content></entry>

</feed>
